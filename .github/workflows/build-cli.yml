name: Build CLI

on:
  push:
    branches:
      - 'main'
    paths:
      - 'apps/cli/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-cli.yml'
  workflow_dispatch:
    inputs: {}

defaults:
  run:
    working-directory: apps/cli

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version package.json)
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT

  cli:
    name: Build CLI
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
    runs-on: ${{ matrix.os }}
    needs:
      - setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
      _WIN_PKG_FETCH_VERSION: 16.16.0
      _WIN_PKG_VERSION: 3.4
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Unix Vars
        if: runner.os != 'Windows'
        run: |
          echo "LOWER_RUNNER_OS=$(echo $RUNNER_OS | awk '{print tolower($0)}')" >> $GITHUB_ENV
          echo "SHORT_RUNNER_OS=$(echo $RUNNER_OS | awk '{print substr($0, 1, 3)}' | \
            awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Setup Windows builder
        if: runner.os == 'Windows'
        run: |
          choco install checksum --no-progress
          choco install reshack --no-progress
          choco install nasm --no-progress

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: '14'

      - name: Install node-gyp
        run: |
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Get pkg-fetch
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          cd $HOME
          $fetchedUrl = "https://github.com/vercel/pkg-fetch/releases/download/v$env:_WIN_PKG_VERSION/node-v$env:_WIN_PKG_FETCH_VERSION-win-x64"
          New-Item -ItemType directory -Path .\.pkg-cache
          New-Item -ItemType directory -Path .\.pkg-cache\v$env:_WIN_PKG_VERSION
          Invoke-RestMethod -Uri $fetchedUrl `
            -OutFile ".\.pkg-cache\v$env:_WIN_PKG_VERSION\fetched-v$env:_WIN_PKG_FETCH_VERSION-win-x64"

      - name: Install
        run: npm ci

      - name: Build & Package Windows
        if: runner.os == 'Windows'
        run: npm run dist:win --quiet

      - name: Build & Package Unix
        if: runner.os != 'Windows'
        run: npm run dist:${{ env.SHORT_RUNNER_OS }} --quiet

      - name: Zip Windows
        shell: cmd
        if: runner.os == 'Windows'
        run: 7z a ./dist/uab-windows-%_PACKAGE_VERSION%.zip ./dist/windows/uab.exe

      - name: Zip Unix
        if: runner.os != 'Windows'
        run: |
          cd ./dist/${{ env.LOWER_RUNNER_OS }}
          zip ../uab-${{ env.LOWER_RUNNER_OS }}-${{ env._PACKAGE_VERSION }}.zip ./uab

      - name: Upload Windows zip asset
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: uab-windows-${{ env._PACKAGE_VERSION }}.zip
          path: apps/cli/dist/uab-windows-${{ env._PACKAGE_VERSION }}.zip

      - name: Upload Unix zip asset
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: uab-${{ env.LOWER_RUNNER_OS }}-${{ env._PACKAGE_VERSION }}.zip
          path: apps/cli/dist/uab-${{ env.LOWER_RUNNER_OS }}-${{ env._PACKAGE_VERSION }}.zip
